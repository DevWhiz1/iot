esphome:
  name: test

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "123"

ota:
  password: "pakistan123"

wifi:
  ssid: "Digital Spyre"
  password: "DigitalSpyre@14321Nada"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test Fallback Hotspot"
    password: "123456789"

captive_portal:

switch:
  - platform: gpio
    name: "switch 1"
    pin: 25
    id: "switch_1"

  - platform: gpio
    name: "switch 2"
    pin: 26
    id: "switch_2"
    
sensor:
  - platform: ultrasonic
    trigger_pin: 33
    echo_pin: 34
    name: "Ultrasonic Sensor"
    id: "ultrasonic_sensor"

web_server:
  port: 80

web_socket:
  port: 81
  on_message:
    - then:
        - lambda: |-
            ESP_LOGI("web_socket", "Received message: %s", x.c_str());
        - delay: 100ms
        - lambda: |-
            ESP_LOGI("web_socket", "Sending response: %s", "Hello, client!");

# Example of HTTP Request
http_request:
  id: my_request
  url: "http://test.local/data"
  method: GET
  headers:
    Content-Type: "application/json"
  timeout: 10s

interval:
  - interval: 60s
    then:
      - http_request.get: my_request
      - lambda: |-
          if (id(my_request).status_code == 200) {
            ESP_LOGI("http_request", "Success: %s", id(my_request).get_response_body().c_str());
          } else {
            ESP_LOGE("http_request", "Error %d: %s", id(my_request).status_code, id(my_request).get_response_body().c_str());
          }

# WebSocket to send switch and sensor data
interval:
  - interval: 10s
    then:
      - lambda: |-
          std::string message = "Switch 1: " + std::to_string(id(switch_1).state) + 
                                ", Switch 2: " + std::to_string(id(switch_2).state) + 
                                ", Ultrasonic Sensor: " + std::to_string(id(ultrasonic_sensor).state);
          id(web_socket).send(message);
